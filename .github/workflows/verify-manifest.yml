name: Verify Scoop Manifest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify-installation:
    name: Test Scoop Installation
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Scoop
        run: |
          iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
          echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Add bucket and install k3d-local
        run: |
          scoop bucket add gautampachnanda101 https://github.com/gautampachnanda101/scoop-bucket
          scoop install k3d-local

      - name: Verify installation
        run: |
          Get-Command k3d-local
          k3d-local --version

      - name: Test basic functionality
        run: |
          k3d-local --help

      - name: Install cluster prerequisites
        run: |
          # Install k3d, kubectl, and helm for cluster operations
          scoop bucket add main
          scoop install k3d kubectl helm

      - name: Setup Podman (better Windows networking than Docker Desktop)
        shell: pwsh
        run: |
          Write-Host "Installing Podman for Windows..."

          # Install Podman via winget
          winget install -e --id RedHat.Podman --silent --accept-package-agreements --accept-source-agreements

          # Add Podman to PATH for this session
          $podmanPath = "C:\Program Files\RedHat\Podman"
          if (Test-Path $podmanPath) {
            $env:PATH = "$podmanPath;$env:PATH"
            echo "$podmanPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

          # Initialize Podman machine
          Write-Host "Initializing Podman machine..."
          podman machine init

          Write-Host "Starting Podman machine..."
          podman machine start

          # Wait for Podman to be ready
          $maxAttempts = 20
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            $attempt++
            Write-Host "Waiting for Podman to be ready (attempt $attempt/$maxAttempts)..."
            try {
              podman version 2>&1 | Out-Null
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✓ Podman is ready"
                podman version
                break
              }
            } catch {
              Write-Host "Podman not ready yet: $_"
            }
            Start-Sleep -Seconds 5
          }

          if ($attempt -eq $maxAttempts) {
            Write-Error "Podman failed to start after $maxAttempts attempts"
            exit 1
          }

          # Start Podman Docker-compatible socket (so k3d can talk to Podman via Docker API)
          Write-Host "Starting Podman Docker-compatible API service..."
          Start-Job -Name "PodmanSocket" -ScriptBlock {
            podman system service --time=0 tcp://127.0.0.1:2375
          } | Out-Null

          # Wait for Podman socket to be available
          Write-Host "Waiting for Podman Docker socket to be ready..."
          $attempt = 0
          while ($attempt -lt 15) {
            $attempt++
            try {
              $response = Invoke-WebRequest -Uri "http://127.0.0.1:2375/_ping" -TimeoutSec 2 -UseBasicParsing 2>&1
              if ($response.StatusCode -eq 200) {
                Write-Host "✓ Podman Docker socket is ready"
                break
              }
            } catch {
              Write-Host "Podman socket not ready yet (attempt $attempt/15)..."
            }
            Start-Sleep -Seconds 2
          }

          # Configure Docker host to point to Podman socket
          Write-Host "Configuring Docker host to use Podman..."
          echo "DOCKER_HOST=tcp://127.0.0.1:2375" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $env:DOCKER_HOST = "tcp://127.0.0.1:2375"

          # Verify Docker API via Podman is working
          Write-Host "Verifying Docker API compatibility..."
          docker version

      - name: Test cluster creation
        shell: pwsh
        env:
          DOCKER_HOST: tcp://127.0.0.1:2375
        run: |
          Write-Host "Creating k3d cluster with Podman (via Docker API)..."
          Write-Host "DOCKER_HOST=$env:DOCKER_HOST"
          k3d-local create --name test-cluster --verbose

          $createExitCode = $LASTEXITCODE
          if ($createExitCode -ne 0) {
            Write-Error "Cluster creation failed with exit code $createExitCode"
            exit 1
          }

          Write-Host "✓ Cluster creation succeeded"
          Write-Host ""
          Write-Host "Checking cluster status..."
          k3d-local status

          # Verify cluster exists using k3d command
          Write-Host ""
          Write-Host "Listing k3d clusters..."
          $clusterList = k3d cluster list | Out-String
          Write-Host $clusterList

          if ($clusterList -match "test-cluster") {
            Write-Host "✓ Cluster test-cluster found in k3d list"
          } else {
            Write-Error "✗ Cluster test-cluster NOT found in k3d list"
            exit 1
          }

          # Wait for cluster to be fully ready
          Write-Host ""
          Write-Host "Waiting for cluster to be ready..."
          $maxAttempts = 30
          $attempt = 0
          $ready = $false

          while ($attempt -lt $maxAttempts) {
            $attempt++
            Write-Host "Checking cluster readiness (attempt $attempt/$maxAttempts)..."

            try {
              $nodes = kubectl get nodes --no-headers 2>&1
              if ($LASTEXITCODE -eq 0 -and $nodes) {
                Write-Host "✓ Cluster is ready!"
                kubectl get nodes
                $ready = $true
                break
              }
            } catch {
              Write-Host "Cluster not ready yet: $_"
            }

            Start-Sleep -Seconds 3
          }

          if (-not $ready) {
            Write-Error "✗ Cluster failed to become ready after $maxAttempts attempts"
            exit 1
          }

      - name: Test cluster deletion
        if: always()
        shell: pwsh
        env:
          DOCKER_HOST: tcp://127.0.0.1:2375
        run: |
          Write-Host "Deleting k3d cluster..."
          k3d-local delete --name test-cluster

          # Verify cluster is deleted
          Write-Host ""
          Write-Host "Verifying cluster deletion..."
          $clusterList = k3d cluster list | Out-String
          Write-Host $clusterList

          if ($clusterList -notmatch "test-cluster") {
            Write-Host "✓ Cluster test-cluster successfully deleted"
          } else {
            Write-Warning "Cluster test-cluster may still exist"
          }

      - name: Uninstall
        if: always()
        run: |
          scoop uninstall k3d-local
          scoop bucket rm gautampachnanda101
