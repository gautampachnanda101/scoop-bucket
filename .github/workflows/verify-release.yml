name: Verify release available on Chocolatey

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Explicit version to verify (overrides release tag)'
        required: false
        default: ''

permissions:
  contents: read

jobs:
  verify-choco:
    runs-on: windows-latest
    permissions:
      contents: read

    env:
      CHOCO_QUERY_RETRIES: 3
      CHOCO_QUERY_BACKOFF_SECONDS: 5
      INSTALL_TIMEOUT_SECONDS: 300

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine and normalize tag (supports manual override via workflow_dispatch input)
        id: tag
        shell: pwsh
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name || '' }}
          INPUT_VERSION: ${{ github.event.inputs.version || '' }}
        run: |
          function NormalizeVersion([string]$v) { if (-not $v) { return $v }; return $v -replace '^[vV]','' }

          $input = $env:INPUT_VERSION
          $release = $env:RELEASE_TAG

          if ($input -and $input.Trim() -ne '') { $tag = $input.Trim() } elseif ($release -and $release.Trim() -ne '') { $tag = $release.Trim() } else { Write-Error "No version provided via workflow_dispatch input and no release tag available."; exit 1 }

          $norm = NormalizeVersion($tag)
          Write-Host "Using version: $tag -> normalized: $norm"
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "norm=$norm" >> $env:GITHUB_OUTPUT

      - name: Find matching Scoop manifest(s) using script
        id: find
        shell: pwsh
        run: |
          $norm = '${{ steps.tag.outputs.norm }}'
          if (-not (Test-Path -Path '.github/scripts/find-manifests.ps1')) {
            Write-Error "find-manifests.ps1 not found at .github/scripts/. Expected helper missing."
            exit 1
          }

          # Call the helper script directly within the current pwsh process so that the -Version parameter is passed to the script,
          # not to pwsh.exe (pwsh.exe has its own -Version parameter which causes a ParameterSet conflict).
          $out = & './.github/scripts/find-manifests.ps1' -Version $norm -AsJson
          if ($LASTEXITCODE -ne 0) { Write-Error "find-manifests script failed"; exit 1 }
          if (-not $out) { Write-Error "No matches returned by find-manifests"; exit 1 }

          # Ensure valid JSON
          try { $matches = $out | ConvertFrom-Json -ErrorAction Stop } catch { Write-Error "Failed to parse JSON output from find-manifests`; $_"; exit 1 }
          if ($matches.Count -eq 0) { Write-Error "No matching manifest found for version '$norm'"; exit 1 }

          $json = $matches | ConvertTo-Json -Compress
          echo "matches=$json" >> $env:GITHUB_OUTPUT

      - name: Verify each package on Chocolatey with retries, timeout, and improved parsing
        shell: pwsh
        env:
          MATCHES: ${{ steps.find.outputs.matches }}
          CHOCO_QUERY_RETRIES: ${{ env.CHOCO_QUERY_RETRIES }}
          CHOCO_QUERY_BACKOFF_SECONDS: ${{ env.CHOCO_QUERY_BACKOFF_SECONDS }}
          INSTALL_TIMEOUT_SECONDS: ${{ env.INSTALL_TIMEOUT_SECONDS }}
        run: |
          $matches = ConvertFrom-Json $env:MATCHES
          $retries = [int]$env:CHOCO_QUERY_RETRIES
          $backoff = [int]$env:CHOCO_QUERY_BACKOFF_SECONDS
          $installTimeout = [int]$env:INSTALL_TIMEOUT_SECONDS

          function Ensure-Choco() {
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Write-Host "Chocolatey CLI not found on runner; installing Chocolatey..."
              Set-ExecutionPolicy Bypass -Scope Process -Force
              iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            }
          }

          function Parse-ChocoVersions([string]$raw) {
            # Robustly extract version tokens from choco list output. Matches semver-like tokens and suffixes.
            $tokens = @()
            foreach ($line in ($raw -split "`n")) {
              $line = $line.Trim()
              if (-not $line) { continue }
              # remove package name prefix if present (format: "pkgName version" or "pkgName v1.2.3|1.2.2")
              $parts = $line -split '\s+' | Select-Object -Skip 1
              if (-not $parts) { $parts = $line }
              $joined = ($parts -join ' ')
              # split on common separators
              $candidates = $joined -split '[,|]'
              foreach ($c in $candidates) {
                $t = $c.Trim()
                if ($t -match '^[vV]?\d+([.-][0-9A-Za-z-]+)*') { $tokens += ($t -replace '^[vV]','') }
              }
            }
            return $tokens | Sort-Object -Unique
          }

          foreach ($m in $matches) {
            $id = $m.id
            $ver = $m.version
            $manifestPath = $m.path

            Write-Host "Verifying Chocolatey package: $id@$ver (manifest: $manifestPath)"
            Ensure-Choco

            $found = $false
            $lastOutput = ''
            for ($i=1; $i -le $retries; $i++) {
              Write-Host "Querying Chocolatey (attempt $i/$retries) for $id"
              $raw = choco list $id --exact --all-versions --no-color 2>&1 | Out-String
              $lastExit = $LASTEXITCODE
              Write-Host $raw
              $lastOutput = $raw
              if ($lastExit -ne 0) {
                Write-Host "choco list returned exit code $lastExit; will retry after backoff"
              } else {
                $tokens = Parse-ChocoVersions -raw $raw
                if ($tokens -contains $ver) { $found = $true; break }
                # sometimes the package line may use the package name and a '|' separated list
                if ($raw -match [regex]::Escape($ver)) { $found = $true; break }
              }

              Start-Sleep -Seconds ($backoff * $i)
            }

            if (-not $found) {
              Write-Error "Package $id does not appear to have version $ver on Chocolatey. Last listing:`n$lastOutput"
              exit 1
            }

            Write-Host "Found $id@$ver on Chocolatey. Attempting install to verify end-to-end. (timeout ${installTimeout}s)"

            # Install with timeout using Start-Process and Wait-Process
            $proc = Start-Process -FilePath 'choco' -ArgumentList @('install', $id, '--version', $ver, '-y', '--limit-output') -NoNewWindow -PassThru
            try {
              $wait = $proc | Wait-Process -Timeout $installTimeout -ErrorAction SilentlyContinue
              if ($proc.HasExited -eq $false) {
                Write-Host "Install process exceeded timeout (${installTimeout}s); killing process"
                $proc | Stop-Process -Force -ErrorAction SilentlyContinue
                throw "Install timeout"
              }
              if ($proc.ExitCode -ne 0) {
                throw "choco install failed with exit code $($proc.ExitCode)"
              }
            } catch {
              Write-Error "choco install failed for $id@$ver: $_"
              # attempt cleanup
              choco uninstall $id -y --limit-output | Out-Null
              exit 1
            }

            # Verify installed locally
            $installedRaw = choco list --local-only --exact $id 2>&1 | Out-String
            Write-Host "Local installed listing:`n$installedRaw"
            $installedTokens = Parse-ChocoVersions -raw $installedRaw
            if ($installedTokens -notcontains $ver -and ($installedRaw -notmatch [regex]::Escape($ver))) {
              Write-Error "Installed package $id does not list version $ver locally. Local listing:`n$installedRaw"
              choco uninstall $id -y --limit-output | Out-Null
              exit 1
            }

            Write-Host "Install verification succeeded for $id@$ver â€” uninstalling."
            choco uninstall $id -y --limit-output | Out-Null
          }

      - name: Success
        if: success()
        run: |
          Write-Host "Release verification succeeded: Chocolatey package(s) exist and install/uninstall completed."
